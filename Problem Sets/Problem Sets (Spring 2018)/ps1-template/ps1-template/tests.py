import unittest
from find_peak_2D import find_peak_2D

tests = (
    [
        [12, 10, 12, 4, 5, 5, 14, 3],
        [15, 2, 0, 8, 2, 11, 13, 9],
        [6, 7, 14, 10, 10, 13, 9, 13],
        [8, 14, 9, 7, 2, 0, 11, 6],
        [7, 12, 15, 1, 5, 0, 8, 5],
        [3, 11, 10, 4, 4, 6, 15, 12],
        [11, 12, 11, 7, 14, 4, 11, 14],
        [8, 10, 15, 5, 9, 14, 12, 12],
    ],
    [
        [11, 3, 15, 9, 8, 8, 1, 2, 12, 15],
        [14, 11, 8, 9, 15, 5, 0, 9, 6, 3],
        [6, 2, 10, 10, 6, 5, 15, 6, 10, 4],
        [2, 6, 3, 4, 15, 6, 7, 12, 1, 0],
        [7, 0, 14, 0, 9, 12, 7, 2, 7, 12],
        [14, 2, 1, 6, 2, 11, 5, 9, 14, 9],
    ],
    [
        [7, 8, 11, 6, 2, 10],
        [11, 2, 8, 14, 12, 10],
        [1, 10, 0, 12, 12, 12],
        [9, 15, 6, 0, 12, 14],
        [7, 6, 8, 8, 9, 0],
        [10, 14, 14, 6, 11, 13],
        [8, 15, 10, 1, 13, 14],
        [13, 2, 7, 1, 0, 14],
        [10, 15, 12, 9, 4, 4],
        [3, 12, 3, 5, 1, 8],
    ],
    [
        [9, 10, 11, 12, 13, 14, 15, 14, 13, 12],
        [10, 11, 12, 13, 14, 15, 16, 15, 14, 13],
        [11, 12, 13, 14, 15, 16, 17, 16, 15, 14],
        [12, 13, 14, 15, 16, 17, 18, 17, 16, 15],
        [11, 12, 13, 14, 15, 16, 17, 16, 15, 14],
        [10, 11, 12, 13, 14, 15, 16, 15, 14, 13],
        [9, 10, 11, 12, 13, 14, 15, 14, 13, 12],
        [8, 9, 10, 11, 12, 13, 14, 13, 12, 11],
    ],
    [
        [26, 27, 28, 29, 30, 31, 32, 33, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13],
        [27, 28, 29, 30, 31, 32, 33, 34, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14],
        [28, 29, 30, 31, 32, 33, 34, 35, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15],
        [29, 30, 31, 32, 33, 34, 35, 36, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16],
        [30, 31, 32, 33, 34, 35, 36, 37, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17],
        [31, 32, 33, 34, 35, 36, 37, 38, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18],
        [32, 33, 34, 35, 36, 37, 38, 39, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19],
        [33, 34, 35, 36, 37, 38, 39, 40, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20],
        [34, 35, 36, 37, 38, 39, 40, 41, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21],
        [35, 36, 37, 38, 39, 40, 41, 42, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22],
        [36, 37, 38, 39, 40, 41, 42, 43, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23],
        [37, 38, 39, 40, 41, 42, 43, 44, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24],
        [38, 39, 40, 41, 42, 43, 44, 45, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25],
        [39, 40, 41, 42, 43, 44, 45, 46, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26],
        [40, 41, 42, 43, 44, 45, 46, 47, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27],
        [41, 42, 43, 44, 45, 46, 47, 48, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28],
        [42, 43, 44, 45, 46, 47, 48, 49, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29],
        [41, 42, 43, 44, 45, 46, 47, 48, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28],
        [40, 41, 42, 43, 44, 45, 46, 47, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27],
        [39, 40, 41, 42, 43, 44, 45, 46, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26],
    ],
)

def is_peak(A, p):
    x, y = p
    for x_ in range(max(0, x - 1), min(x + 2, len(A[0]))):
        for y_ in range(max(0, y - 1), min(y + 2, len(A))):
            if (x_ != x or y_ != y) and A[y_][x_] > A[y][x]:
                return False
    return True

def check_peak(A):
    return is_peak(A, find_peak_2D(A))

class TestFindPeak2D(unittest.TestCase):
    def test_01(self):
        self.assertTrue(check_peak(tests[0]))

    def test_02(self):
        self.assertTrue(check_peak(tests[1]))

    def test_03(self):
        self.assertTrue(check_peak(tests[2]))

    def test_04(self):
        self.assertTrue(check_peak(tests[3]))
       
    def test_05(self):
        self.assertTrue(check_peak(tests[4]))

if __name__ == '__main__':
   res = unittest.main(verbosity = 3, exit = False)
