import unittest
from close_cow_friends import close_cow_friends

tests = (
    ([(3.4, 5.6), (1.2, 3.4), (10.8, -17.4)], 1),
    ([(2.7, 8.3), (-1.7, -3.0), (3.4, 5.6), (1.2, 3.4), (10.8, -17.4)], 3),
    ([(-3.085938209482254, -35.51086598631448), (26.993450139920384, 0.8331111535179057), (18.498724377558744, 30.754288731062978), (6.608602405714086, 29.946996046275647), (-6.474375132714367, 11.891001424902061), (2.6030415461917915, -23.33983716414429), (20.043810572570063, -34.85060665721733), (23.528508854561295, -2.4642560026968043), (-38.75851406006202, 14.135701382849792), (-25.728316581837667, -26.455843842973806)], 5),
    ([(15.264760143053497, -130.14208399817008), (50.50550654313945, 86.87021193582788), (-42.031894950112864, 17.359744276793077), (153.87824595777465, -24.575408038573133), (146.68459258248384, 39.778373855267205), (-17.261343775062503, -150.34513894186082), (-7.888881503690502, 140.74721538088508), (-5.755185408131858, -40.57451390584304), (-78.38347285996491, 59.98162657732287), (-157.71577663100393, -40.41640446061114), (-117.3781003191878, -3.226245368953334), (-158.2100778717298, -118.89933857962785), (132.8459447856599, -133.69485039951357), (87.65280611368851, -99.92804118120304), (-129.94260112156488, 46.78931340342706), (-124.62119127597404, 38.40977924127819), (-65.4864253057137, 127.6572384834416), (-151.1541824199785, 112.85440859200568), (93.85743645654142, 128.71814127828242), (-144.39594999053477, 17.760034344872963), (96.5642319015706, -105.06115823137445), (-78.61928401976877, -88.78074349273696), (-124.29375881928996, -99.5655115370537), (142.23074927773013, -51.03205584168982), (135.00236046117055, -82.58021088388064), (148.47502479157544, 114.04275669326692), (95.23595978861223, -145.84990272981622), (-56.30494858876199, -56.18160815463118), (97.47497057269722, 1.46840083327449), (-92.05764875257063, -93.26644818849897), (7.506181331064492, 86.41725650276577), (-11.51696289719545, -120.2136487411624), (-106.03746750568294, -142.94383807339395), (55.828680729455755, 40.577226162140775), (34.478574124491146, -157.73170680078272), (-18.866041099829214, 46.33382392645339), (126.82298462855805, -82.41179560972894), (-111.72802526598367, 54.995994458593785), (-60.6001643281139, -102.93889078282648), (-141.53966851797418, 10.432618238686914)], 10),
    ([(-128.83069292481636, 6.091341500299849), (-46.92205850507744, -55.28724917602212), (74.31983030715513, -36.71732556769118), (69.49132718774952, 24.076372809917242), (-71.7724963533431, 86.64986063037536), (-88.25425181804958, 4.917026997553856), (125.59469907401775, -118.70443469955086), (-75.29648517524872, -15.306619552181703), (-66.27343423380881, -136.56888927118638), (-91.72543623365127, 95.25695618719514), (34.31008115568672, 12.557260830492613), (-75.76960467692325, -117.14665255261274), (91.73137105910699, 22.40470350735904), (-125.8042930369122, 72.77304343434726), (-105.65238387242692, -119.50632949568725), (-30.371524646590522, 3.8871177478172076), (-2.3684257778026208, 6.063660824984703), (-7.555379911901429, -43.58964256101222), (-87.09687938906256, -32.72946657864799), (50.707187141777865, 122.90078906152911), (-21.958304133084184, -19.303020277026935), (138.68472625264997, 131.31766762815047), (117.77396833440402, -99.27201807258112), (-34.90572787609721, 13.928364613961335), (-2.5502192465905558, -95.95285396220054), (-136.6820577491722, 83.58650243353178), (-17.906914039791808, 60.73730513288147), (-69.47684396270886, -96.97500325556517), (-86.76189311574355, 89.63595253329143), (134.10588994707356, 94.14536953408826), (-60.41417816606902, -39.95256342168531), (-106.3561221823902, 22.26296922985872), (-120.81067510280695, -112.88172477813667), (-80.30715808870033, 73.49166699880813), (-95.71036296032469, -110.72334206686075)], 30),
)

answers = (
    [(1.2, 3.4)],
    [(-1.7, -3.0), (1.2, 3.4), (3.4, 5.6)],
    [(-6.474375132714367, 11.891001424902061), (2.6030415461917915, -23.33983716414429), (23.528508854561295, -2.4642560026968043), (26.993450139920384, 0.8331111535179057), (6.608602405714086, 29.946996046275647)],
    [(-5.755185408131858, -40.57451390584304), (-42.031894950112864, 17.359744276793077), (-18.866041099829214, 46.33382392645339), (55.828680729455755, 40.577226162140775), (-56.30494858876199, -56.18160815463118), (7.506181331064492, 86.41725650276577), (97.47497057269722, 1.46840083327449), (-78.38347285996491, 59.98162657732287), (50.50550654313945, 86.87021193582788), (-117.3781003191878, -3.226245368953334)],
    [(-2.3684257778026208, 6.063660824984703), (-21.958304133084184, -19.303020277026935), (-30.371524646590522, 3.8871177478172076), (34.31008115568672, 12.557260830492613), (-34.90572787609721, 13.928364613961335), (-7.555379911901429, -43.58964256101222), (-17.906914039791808, 60.73730513288147), (-60.41417816606902, -39.95256342168531), (-46.92205850507744, -55.28724917602212), (69.49132718774952, 24.076372809917242), (-75.29648517524872, -15.306619552181703), (74.31983030715513, -36.71732556769118), (-88.25425181804958, 4.917026997553856), (-87.09687938906256, -32.72946657864799), (91.73137105910699, 22.40470350735904), (-2.5502192465905558, -95.95285396220054), (-106.3561221823902, 22.26296922985872), (-80.30715808870033, 73.49166699880813), (-71.7724963533431, 86.64986063037536), (-69.47684396270886, -96.97500325556517), (-86.76189311574355, 89.63595253329143), (-128.83069292481636, 6.091341500299849), (-91.72543623365127, 95.25695618719514), (50.707187141777865, 122.90078906152911), (-75.76960467692325, -117.14665255261274), (-125.8042930369122, 72.77304343434726), (-95.71036296032469, -110.72334206686075), (-66.27343423380881, -136.56888927118638), (117.77396833440402, -99.27201807258112), (-105.65238387242692, -119.50632949568725)],
)

def check(student_sol, sol):
    if len(sol) != len(student_sol):
        return False
    for x, y in zip(sol, student_sol):
        if x != y: return False
    return True

class TestFindPeak2D(unittest.TestCase):
    def test_01(self):
        self.assertTrue(check(close_cow_friends(*(tests[0])), answers[0]))

    def test_02(self):
        self.assertTrue(check(close_cow_friends(*tests[1]), answers[1]))

    def test_03(self):
        self.assertTrue(check(close_cow_friends(*tests[2]), answers[2]))

    def test_04(self):
        self.assertTrue(check(close_cow_friends(*tests[3]), answers[3]))

    def test_05(self):
        self.assertTrue(check(close_cow_friends(*tests[4]), answers[4]))

if __name__ == '__main__':
   res = unittest.main(verbosity = 3, exit = False)
